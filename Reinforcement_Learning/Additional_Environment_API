                                                            ########## Attributes ###########

Env.action_space: Space[ActType]
This attribute gives the format of valid actions. It is of datatype Space provided by Gym. For example, if the action space is of type Discrete and gives the value Discrete(2),
this means there are two valid discrete actions: 0 & 1.

>>>env.action_space
Discrete(2)
>>>env.observation_space
Box(-3.4028234663852886e+38, 3.4028234663852886e+38, (4,), float32)

Env.observation_space: Space[ObsType]
This attribute gives the format of valid observations. It is of datatype Space provided by Gym. For example, if the observation space is of type Box and the shape of the object
is (4,), this denotes a valid observation will be an array of 4 numbers. We can check the box bounds as well with attributes.

>>>env.observation_space.high
array([4.8000002e+00, 3.4028235e+38, 4.1887903e-01, 3.4028235e+38], dtype=float32)
>>>env.observation_space.low
array([-4.8000002e+00, -3.4028235e+38, -4.1887903e-01, -3.4028235e+38], dtype=float32)

Env.reward_range = (-inf, inf)
This attribute is a tuple corresponding to min and max possible rewards. Default range is set to (-inf,+inf). You can set it if you want a narrower range.


                                                        ########### METHODS ###########

gym.Env.close(self)
Override close in your subclass to perform any necessary cleanup.
Environments will automatically close() themselves when garbage collected or when the program exits.

gym.Env.seed(self, seed=None)
DEPRECATED:
function that sets the seed for the environment’s random number generator(s).
Use env.reset(seed=seed) as the new API for setting the seed of the environment.

NOTE -> Some environments use multiple pseudorandom number generators. We want to capture all such seeds used in order to ensure that there aren’t accidental
        correlations between multiple generators.

PARAMETERS:
seed (Optional int) – The seed value for the random number generator

RETURNS:
seeds (List[int]) – Returns the list of seeds used in this environment’s random number generators. The first value in the list should be the “main” seed, or the value
which a reproducer should pass to ‘seed’. Often, the main seed equals the provided ‘seed’, but this won’t be true if seed=None, for example.